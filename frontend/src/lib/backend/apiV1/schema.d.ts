/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api-v1/post/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["modifyPost"];
        post?: never;
        delete: operations["deletePost"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/notification/{notificationId}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["markAsRead"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/comment/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["modifyComment"];
        post?: never;
        delete: operations["deleteComment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/members/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그인 */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/members/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 회원가입 */
        post: operations["join"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/member/follow/{receiver}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 상대방 팔로우 요청
         * @description 상대 멤버와 팔로우 관계를 맺습니다.
         */
        post: operations["followMember"];
        /**
         * 상대방 팔로우 취소
         * @description 상대 멤버와 팔로우 관계를 끊습니다.
         */
        delete: operations["unfollowMember"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/like/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 좋아요 토글
         * @description 게시물, 댓글, 대댓글의 좋아요를 토글합니다.
         */
        post: operations["toggleLike"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/bookmark/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 게시물 북마크 등록
         * @description 게시물을 자신의 북마크에 등록합니다.
         */
        post: operations["addBookmarkPost"];
        /**
         * 게시물 북마크 삭제
         * @description 게시물을 자신의 북마크에서 삭제합니다.
         */
        delete: operations["removeBookmarkPost"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/notification/subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["subscribe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/notification/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/members/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 회원 정보 조회 */
        get: operations["publicMemberDetailsByUsername"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/members/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 액세스 토큰 재발급 */
        get: operations["refreshAccessToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/member/{username}/following": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 팔로잉 목록 조회
         * @description 특정 사용자가 팔로우하고 있는 멤버 목록을 조회합니다.
         */
        get: operations["getFollowingList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/member/{username}/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 팔로워 목록 조회
         * @description 특정 사용자를 팔로우하고 있는 멤버 목록을 조회합니다.
         */
        get: operations["getFollowerList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/member/mutual/{receiver}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 맞팔로우 확인
         * @description 상대 멤버와 팔로우 관계인지 확인합니다.
         */
        get: operations["isMutualFollow"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/member/following/{receiver}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 팔로우 여부 확인
         * @description 상대 멤버를 팔로우하고 있는지 확인합니다.
         */
        get: operations["isFollowing"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 메인 피드 요청
         * @description 자신 및 팔로잉 게시물과 추천 게시물로 이뤄진 피드를 반환합니다.
         */
        get: operations["findFeedList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/feed/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 단건 피드 요청
         * @description 단건 게시물을 피드로 반환합니다.
         */
        get: operations["findFeedInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/feed/member": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 멤버 피드 요청
         * @description 해당 멤버의 게시물에 대한 피드를 요청합니다.
         */
        get: operations["findMemberFeedList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/comment/replies/{parentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getReplies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/comment/post/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getComments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/bookmark/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 북마크 목록 조회
         * @description 자신이 북마크한 게시물 목록을 조회합니다.
         */
        get: operations["getBookmarkList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-v1/members/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 로그아웃 */
        delete: operations["logout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PostModifyRequest: {
            /** Format: int64 */
            postId: number;
            content: string;
            /** Format: int64 */
            memberId: number;
            images?: string[];
        };
        PostModifyResponse: {
            /** Format: int64 */
            id: number;
            content: string;
            /** Format: int64 */
            memberId: number;
        };
        RsDataVoid: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: Record<string, never>;
            success?: boolean;
        };
        CommentModifyRequest: {
            /** Format: int64 */
            commentId: number;
            /** Format: int64 */
            memberId: number;
            content: string;
        };
        CommentModifyResponse: {
            /** Format: int64 */
            id?: number;
            content?: string;
            /** Format: int64 */
            postId?: number;
            /** Format: int64 */
            memberId?: number;
        };
        PostCreateRequest: {
            /** Format: int64 */
            memberId: number;
            content: string;
            images?: string[];
        };
        PostCreateResponse: {
            /** Format: int64 */
            id: number;
            content: string;
            /** Format: int64 */
            memberId: number;
            imgUrlList?: string[];
        };
        MemberLoginRequest: {
            /** @description 사용자 이름 */
            username: string;
            /** @description 비밀번호 */
            password: string;
        };
        MemberLoginResponse: {
            /** Format: int64 */
            id?: number;
            username?: string;
            profileUrl?: string;
        };
        RsDataMemberLoginResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["MemberLoginResponse"];
            success?: boolean;
        };
        MemberJoinRequest: {
            /** @description Email */
            email: string;
            /** @description 비밀번호 */
            password: string;
            /** @description 사용자 이름 */
            username: string;
        };
        MemberJoinResponse: {
            /** Format: int64 */
            id?: number;
            username?: string;
        };
        RsDataMemberJoinResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["MemberJoinResponse"];
            success?: boolean;
        };
        FollowResponse: {
            senderUsername?: string;
            receiverUsername?: string;
            /** Format: date-time */
            timestamp?: string;
        };
        RsDataFollowResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["FollowResponse"];
            success?: boolean;
        };
        LikeToggleResponse: {
            /** Format: int64 */
            memberId?: number;
            /** Format: int64 */
            resourceId?: number;
            resourceType?: string;
            isLiked?: boolean;
            /** Format: int64 */
            likeCount?: number;
            /** Format: date-time */
            timestamp?: string;
        };
        RsDataLikeToggleResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["LikeToggleResponse"];
            success?: boolean;
        };
        CommentCreateRequest: {
            /** Format: int64 */
            postId: number;
            /** Format: int64 */
            memberId: number;
            content: string;
            /** Format: int64 */
            parentId?: number;
        };
        CommentCreateResponse: {
            /** Format: int64 */
            id?: number;
            content?: string;
            /** Format: int64 */
            ref?: number;
            /** Format: int64 */
            postId?: number;
            /** Format: int64 */
            memberId?: number;
            /** Format: int64 */
            parentId?: number;
        };
        CreateBookmarkResponse: {
            /** Format: int64 */
            bookmarkId?: number;
            /** Format: int64 */
            memberId?: number;
            /** Format: int64 */
            postId?: number;
            /** Format: date-time */
            createDate?: string;
        };
        RsDataCreateBookmarkResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["CreateBookmarkResponse"];
            success?: boolean;
        };
        RsDataSearchPostCursorResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["SearchPostCursorResponse"];
            success?: boolean;
        };
        SearchPostCursorResponse: {
            searchPostResponses?: components["schemas"]["SearchPostResponse"][];
            /** Format: int64 */
            lastPostId?: number;
            hasNext?: boolean;
        };
        SearchPostResponse: {
            /** Format: int64 */
            postId?: number;
            imageUrl?: string;
        };
        SseEmitter: {
            /** Format: int64 */
            timeout?: number;
        };
        NotificationPageResponse: {
            responses?: components["schemas"]["NotificationResponse"][];
            /** Format: int32 */
            totalCount?: number;
            /** Format: int32 */
            currentPage?: number;
            /** Format: int32 */
            totalPageCount?: number;
        };
        NotificationResponse: {
            /** Format: int64 */
            notificationId?: number;
            /** @enum {string} */
            type?: "LIKE" | "FOLLOW" | "COMMENT";
            /** Format: int64 */
            targetId?: number;
            message?: string;
            isRead?: boolean;
            /** Format: date-time */
            createdAt?: string;
        };
        RsDataNotificationPageResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["NotificationPageResponse"];
            success?: boolean;
        };
        MemberResponse: {
            /** Format: int64 */
            id: number;
            username: string;
            profileUrl?: string;
            /** Format: int64 */
            postCount: number;
            /** Format: int64 */
            followerCount: number;
            /** Format: int64 */
            followingCount: number;
        };
        RsDataMemberResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["MemberResponse"];
            success?: boolean;
        };
        FollowingListResponse: {
            followingList?: components["schemas"]["FollowingMemberDto"][];
            /** Format: int32 */
            totalCount?: number;
        };
        FollowingMemberDto: {
            /** Format: int64 */
            id?: number;
            username?: string;
            profileUrl?: string;
        };
        RsDataFollowingListResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["FollowingListResponse"];
            success?: boolean;
        };
        FollowerListResponse: {
            followerList?: components["schemas"]["FollowerMemberDto"][];
            /** Format: int32 */
            totalCount?: number;
        };
        FollowerMemberDto: {
            /** Format: int64 */
            id?: number;
            username?: string;
            profileUrl?: string;
        };
        RsDataFollowerListResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["FollowerListResponse"];
            success?: boolean;
        };
        MutualFollowResponse: {
            isMutualFollow?: boolean;
        };
        RsDataMutualFollowResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["MutualFollowResponse"];
            success?: boolean;
        };
        IsFollowingResponse: {
            isFollowing?: boolean;
        };
        RsDataIsFollowingResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["IsFollowingResponse"];
            success?: boolean;
        };
        FeedInfoResponse: {
            /** Format: int64 */
            authorId?: number;
            authorName?: string;
            /** Format: int64 */
            postId?: number;
            imgUrlList?: string[];
            content?: string;
            /** Format: int64 */
            likeCount?: number;
            /** Format: int64 */
            commentCount?: number;
            /** Format: date-time */
            createdDate?: string;
            hashTagList?: string[];
            /** Format: int64 */
            bookmarkId?: number;
            likeFlag?: boolean;
            profileImgUrl?: string;
        };
        FeedListResponse: {
            feedList?: components["schemas"]["FeedInfoResponse"][];
            /** Format: date-time */
            lastTimestamp?: string;
            /** Format: int64 */
            lastPostId?: number;
        };
        RsDataFeedListResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["FeedListResponse"];
            success?: boolean;
        };
        RsDataFeedInfoResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["FeedInfoResponse"];
            success?: boolean;
        };
        FeedMemberResponse: {
            feedList?: components["schemas"]["FeedInfoResponse"][];
            /** Format: int64 */
            lastPostId?: number;
        };
        RsDataFeedMemberResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["FeedMemberResponse"];
            success?: boolean;
        };
        CommentResponse: {
            /** Format: int64 */
            id?: number;
            content?: string;
            username?: string;
            /** Format: int64 */
            postId?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: int32 */
            step?: number;
            /** Format: int32 */
            refOrder?: number;
            /** Format: int64 */
            ref?: number;
        };
        PageCommentResponse: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["CommentResponse"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["Sortnull"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["Pageablenull"];
            empty?: boolean;
        };
        Pageablenull: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["Sortnull"];
            paged?: boolean;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            unpaged?: boolean;
        };
        Sortnull: {
            empty?: boolean;
            sorted?: boolean;
            unsorted?: boolean;
        };
        BookmarkListResponse: {
            /** Format: int64 */
            bookmarkId?: number;
            /** Format: int64 */
            postId?: number;
            postContent?: string;
            imageUrls?: string[];
            /** Format: date-time */
            bookmarkedAt?: string;
        };
        RsDataListBookmarkListResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["BookmarkListResponse"][];
            success?: boolean;
        };
        PostDeleteResponse: {
            /** Format: int64 */
            postId: number;
            message: string;
        };
        CommentDeleteResponse: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            memberId?: number;
            message?: string;
        };
        DeleteBookmarkRequest: {
            /** Format: int64 */
            bookmarkId: number;
        };
        DeleteBookmarkResponse: {
            /** Format: int64 */
            bookmarkId?: number;
            /** Format: int64 */
            memberId?: number;
            /** Format: int64 */
            postId?: number;
            /** Format: date-time */
            deleteDate?: string;
        };
        RsDataDeleteBookmarkResponse: {
            /** Format: date-time */
            time?: string;
            message?: string;
            data?: components["schemas"]["DeleteBookmarkResponse"];
            success?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    modifyPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostModifyRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PostModifyResponse"];
                };
            };
        };
    };
    deletePost: {
        parameters: {
            query: {
                memberId: number;
            };
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PostDeleteResponse"];
                };
            };
        };
    };
    markAsRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notificationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    modifyComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentModifyRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["CommentModifyResponse"];
                };
            };
        };
    };
    deleteComment: {
        parameters: {
            query: {
                memberId: number;
            };
            header?: never;
            path: {
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["CommentDeleteResponse"];
                };
            };
        };
    };
    createPost: {
        parameters: {
            query: {
                request: components["schemas"]["PostCreateRequest"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PostCreateResponse"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberLoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberLoginResponse"];
                };
            };
        };
    };
    join: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberJoinRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberJoinResponse"];
                };
            };
        };
    };
    followMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                receiver: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataFollowResponse"];
                };
            };
        };
    };
    unfollowMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                receiver: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataFollowResponse"];
                };
            };
        };
    };
    toggleLike: {
        parameters: {
            query: {
                resourceType: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataLikeToggleResponse"];
                };
            };
        };
    };
    createComment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentCreateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["CommentCreateResponse"];
                };
            };
        };
    };
    addBookmarkPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataCreateBookmarkResponse"];
                };
            };
        };
    };
    removeBookmarkPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteBookmarkRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataDeleteBookmarkResponse"];
                };
            };
        };
    };
    search: {
        parameters: {
            query: {
                type: "AUTHOR" | "HASHTAG";
                keyword: string;
                lastPostId?: number;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataSearchPostCursorResponse"];
                };
            };
        };
    };
    subscribe: {
        parameters: {
            query?: {
                browserName?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/event-stream": components["schemas"]["SseEmitter"];
                };
            };
        };
    };
    list: {
        parameters: {
            query?: {
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataNotificationPageResponse"];
                };
            };
        };
    };
    publicMemberDetailsByUsername: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberResponse"];
                };
            };
        };
    };
    refreshAccessToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getFollowingList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataFollowingListResponse"];
                };
            };
        };
    };
    getFollowerList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataFollowerListResponse"];
                };
            };
        };
    };
    isMutualFollow: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                receiver: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataMutualFollowResponse"];
                };
            };
        };
    };
    isFollowing: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                receiver: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataIsFollowingResponse"];
                };
            };
        };
    };
    findFeedList: {
        parameters: {
            query: {
                timestamp: string;
                lastPostId: number;
                maxSize: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataFeedListResponse"];
                };
            };
        };
    };
    findFeedInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataFeedInfoResponse"];
                };
            };
        };
    };
    findMemberFeedList: {
        parameters: {
            query: {
                lastPostId: number;
                maxSize: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataFeedMemberResponse"];
                };
            };
        };
    };
    getReplies: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path: {
                parentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageCommentResponse"];
                };
            };
        };
    };
    getComments: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageCommentResponse"];
                };
            };
        };
    };
    getBookmarkList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RsDataListBookmarkListResponse"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
}